import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib.pyplot as plt
import seaborn as sns


def user_user(suari, numero_recomanacions=5):
# 1. RECOMANADOR USER-USER

# Creem una matriu de valoracions on les files són usuaris i les columnes són productes
user_item_matriu = data.pivot(index='User ID', columns='Product ID', values='Rating')
# print (user_item_matriu)
# rint(user_item_matriu.shape)
# Omplim els valors nuls amb 0 (ja que significa que l'usuari no ha valorat el producte)
user_item_matriu = user_item_matriu.fillna(0)

# Calculem la matriu de similitud entre usuaris utilitzant la similitud cosinus
# similaritat_usuaris = cosine_similarity(user_item_matriu)

# Calculem la matriu de similitud entre usuaris utilitzant la correlació de Pearson
similaritat_usuaris = user_item_matriu.T.corr(method='pearson')


# Convertim la matriu de similitud a un DataFrame per facilitar la interpretació

similaritat_usuaris_df = pd.DataFrame(similaritat_usuaris, index=user_item_matriu.index, columns=user_item_matriu.index)

# print (similaritat_usuaris_df)


def recomanador_productes(usuari, numero_recomanacions=5):
    """
    Recomana productes a un usuari basant-se en el sistema de recomanacions *user-user*.
    
    :param usuari: ID de l'usuari per al qual es fan recomanacions.
    :param numero_recomanacions: Nombre de productes a recomanar.
    :return: Llista de productes recomanats.
    """

    # Obtenim els usuaris més similars al usuari objectiu
    usuaris_similars = similaritat_usuaris_df[usuari].sort_values(ascending=False).iloc[1:]  # Excloem l'usuari mateix

    # Agreguem les valoracions dels veïns més similars
    ponderacions = pd.Series(dtype=float)
    for similar_user, similarity in usuaris_similars.items():
        # Valoracions de l'usuari similar ponderades per la seva similitud
        ponderacions = ponderacions.add(user_item_matriu.loc[similar_user] * similarity, fill_value=0)
    
    # print(ponderacions)

    # Normalitzem dividint entre la suma de les similituds
    sum_similarities = usuaris_similars.sum()
    if sum_similarities > 0:
        ponderacions = ponderacions / sum_similarities

    # Excloem productes que l'usuari ja ha valorat
    productes_classificats_usuaris = user_item_matriu.loc[usuari][user_item_matriu.loc[usuari] > 0].index
    recomanacions = ponderacions.drop(productes_classificats_usuaris)

    # Retornem els productes amb les puntuacions més altes
    return recomanacions.sort_values(ascending=False).head(numero_recomanacions)

# Exemple de recomanació per a un usuari
usuari_a_recommanar = user_item_matriu.index[0] 
recomanacions = recomanador_productes(usuari_a_recommanar, numero_recomanacions=5)

print(f"Recomanacions per a l'usuari {usuari_a_recommanar}:")
print(recomanacions)



# GRÀFIC DE DISTRIBUCIÓ DE LES VALORACIONS 

plt.figure(figsize=(10, 6))
sns.histplot(data['Rating'], bins=5, kde=True)
plt.title('Distribució de les Valoracions')
plt.xlabel('Valoració')
plt.ylabel('Freqüència')
plt.show()

# GRÀFIC DE MAPA DE CALOR DE LA CORRELACIÓ DE SIMILITUD ENTRE USUARIS
"""
plt.figure(figsize=(12, 8))
sns.heatmap(similaritat_usuaris_df, cmap='coolwarm')
plt.title('Mapa de Calor de la Correlació de Similituds entre Usuaris')
plt.xlabel('ID d\'Usuari')
plt.ylabel('ID d\'Usuari')
plt.show()
"""
